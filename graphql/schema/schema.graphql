"""A high precision floating point value represented as a string"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}

"""An arbitrary size integer represented as a string"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}

type Checklists implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  checklist_id: BigInt!
  task_id: BigInt
  item_text: String!
  completed: Boolean
  tasks: Tasks
}

type ChecklistsConnection {
  edges: [ChecklistsEdge!]!
  pageInfo: PageInfo!
}

type ChecklistsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Checklists!]!
}

type ChecklistsEdge {
  cursor: String!
  node: Checklists!
}

input ChecklistsFilter {
  checklist_id: BigIntFilter
  task_id: BigIntFilter
  item_text: StringFilter
  completed: BooleanFilter
  nodeId: IDFilter
}

input ChecklistsInsertInput {
  task_id: BigInt
  item_text: String
  completed: Boolean
}

type ChecklistsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Checklists!]!
}

input ChecklistsOrderBy {
  checklist_id: OrderByDirection
  task_id: OrderByDirection
  item_text: OrderByDirection
  completed: OrderByDirection
}

input ChecklistsUpdateInput {
  task_id: BigInt
  item_text: String
  completed: Boolean
}

type ChecklistsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Checklists!]!
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""A date wihout time information"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

"""A date and time"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

enum FilterIs {
  NULL
  NOT_NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

"""A Javascript Object Notation value serialized as a string"""
scalar JSON

type Lists implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: BigInt!
  user_id: UUID!
  name: String!
  img: String
  created_at: Datetime!
  taskListsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TaskListsFilter

    """Sort order to apply to the collection"""
    orderBy: [TaskListsOrderBy!]
  ): TaskListsConnection
}

type ListsConnection {
  edges: [ListsEdge!]!
  pageInfo: PageInfo!
}

type ListsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Lists!]!
}

type ListsEdge {
  cursor: String!
  node: Lists!
}

input ListsFilter {
  id: BigIntFilter
  user_id: UUIDFilter
  name: StringFilter
  img: StringFilter
  created_at: DatetimeFilter
  nodeId: IDFilter
}

input ListsInsertInput {
  user_id: UUID
  name: String
  img: String
  created_at: Datetime
}

type ListsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Lists!]!
}

input ListsOrderBy {
  id: OrderByDirection
  user_id: OrderByDirection
  name: OrderByDirection
  img: OrderByDirection
  created_at: OrderByDirection
}

input ListsUpdateInput {
  user_id: UUID
  name: String
  img: String
  created_at: Datetime
}

type ListsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Lists!]!
}

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the `Checklists` collection"""
  deleteFromChecklistsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: ChecklistsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): ChecklistsDeleteResponse!

  """Deletes zero or more records from the `Lists` collection"""
  deleteFromListsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: ListsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): ListsDeleteResponse!

  """Deletes zero or more records from the `Tags` collection"""
  deleteFromTagsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: TagsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TagsDeleteResponse!

  """Deletes zero or more records from the `TaskLists` collection"""
  deleteFromTaskListsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: TaskListsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TaskListsDeleteResponse!

  """Deletes zero or more records from the `TaskTags` collection"""
  deleteFromTaskTagsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: TaskTagsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TaskTagsDeleteResponse!

  """Deletes zero or more records from the `Tasks` collection"""
  deleteFromTasksCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: TasksFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TasksDeleteResponse!

  """Adds one or more `Checklists` records to the collection"""
  insertIntoChecklistsCollection(objects: [ChecklistsInsertInput!]!): ChecklistsInsertResponse

  """Adds one or more `Lists` records to the collection"""
  insertIntoListsCollection(objects: [ListsInsertInput!]!): ListsInsertResponse

  """Adds one or more `Tags` records to the collection"""
  insertIntoTagsCollection(objects: [TagsInsertInput!]!): TagsInsertResponse

  """Adds one or more `TaskLists` records to the collection"""
  insertIntoTaskListsCollection(objects: [TaskListsInsertInput!]!): TaskListsInsertResponse

  """Adds one or more `TaskTags` records to the collection"""
  insertIntoTaskTagsCollection(objects: [TaskTagsInsertInput!]!): TaskTagsInsertResponse

  """Adds one or more `Tasks` records to the collection"""
  insertIntoTasksCollection(objects: [TasksInsertInput!]!): TasksInsertResponse

  """Updates zero or more records in the `Checklists` collection"""
  updateChecklistsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ChecklistsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ChecklistsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): ChecklistsUpdateResponse!

  """Updates zero or more records in the `Lists` collection"""
  updateListsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ListsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ListsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): ListsUpdateResponse!

  """Updates zero or more records in the `Tags` collection"""
  updateTagsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: TagsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: TagsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TagsUpdateResponse!

  """Updates zero or more records in the `TaskLists` collection"""
  updateTaskListsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: TaskListsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: TaskListsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TaskListsUpdateResponse!

  """Updates zero or more records in the `TaskTags` collection"""
  updateTaskTagsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: TaskTagsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: TaskTagsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TaskTagsUpdateResponse!

  """Updates zero or more records in the `Tasks` collection"""
  updateTasksCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: TasksUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: TasksFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): TasksUpdateResponse!
}

interface Node {
  """Retrieves a record by `ID`"""
  nodeId: ID!
}

"""Any type not handled by the type system"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `Checklists`"""
  checklistsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ChecklistsFilter

    """Sort order to apply to the collection"""
    orderBy: [ChecklistsOrderBy!]
  ): ChecklistsConnection

  """A pagable collection of type `Lists`"""
  listsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ListsFilter

    """Sort order to apply to the collection"""
    orderBy: [ListsOrderBy!]
  ): ListsConnection

  """Retrieve a record by its `ID`"""
  node(
    """The record's `ID`"""
    nodeId: ID!
  ): Node

  """A pagable collection of type `Tags`"""
  tagsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TagsFilter

    """Sort order to apply to the collection"""
    orderBy: [TagsOrderBy!]
  ): TagsConnection

  """A pagable collection of type `TaskLists`"""
  taskListsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TaskListsFilter

    """Sort order to apply to the collection"""
    orderBy: [TaskListsOrderBy!]
  ): TaskListsConnection

  """A pagable collection of type `TaskTags`"""
  taskTagsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TaskTagsFilter

    """Sort order to apply to the collection"""
    orderBy: [TaskTagsOrderBy!]
  ): TaskTagsConnection

  """A pagable collection of type `Tasks`"""
  tasksCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TasksFilter

    """Sort order to apply to the collection"""
    orderBy: [TasksOrderBy!]
  ): TasksConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}

type Tags implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: BigInt!
  user_id: UUID!
  name: String!
  color: String
  created_at: Datetime!
  taskTagsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TaskTagsFilter

    """Sort order to apply to the collection"""
    orderBy: [TaskTagsOrderBy!]
  ): TaskTagsConnection
}

type TagsConnection {
  edges: [TagsEdge!]!
  pageInfo: PageInfo!
}

type TagsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Tags!]!
}

type TagsEdge {
  cursor: String!
  node: Tags!
}

input TagsFilter {
  id: BigIntFilter
  user_id: UUIDFilter
  name: StringFilter
  color: StringFilter
  created_at: DatetimeFilter
  nodeId: IDFilter
}

input TagsInsertInput {
  user_id: UUID
  name: String
  color: String
  created_at: Datetime
}

type TagsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Tags!]!
}

input TagsOrderBy {
  id: OrderByDirection
  user_id: OrderByDirection
  name: OrderByDirection
  color: OrderByDirection
  created_at: OrderByDirection
}

input TagsUpdateInput {
  user_id: UUID
  name: String
  color: String
  created_at: Datetime
}

type TagsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Tags!]!
}

type TaskLists implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: BigInt!
  task_id: BigInt!
  list_id: BigInt!
  tasks: Tasks!
  lists: Lists!
}

type TaskListsConnection {
  edges: [TaskListsEdge!]!
  pageInfo: PageInfo!
}

type TaskListsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [TaskLists!]!
}

type TaskListsEdge {
  cursor: String!
  node: TaskLists!
}

input TaskListsFilter {
  id: BigIntFilter
  task_id: BigIntFilter
  list_id: BigIntFilter
  nodeId: IDFilter
}

input TaskListsInsertInput {
  task_id: BigInt
  list_id: BigInt
}

type TaskListsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [TaskLists!]!
}

input TaskListsOrderBy {
  id: OrderByDirection
  task_id: OrderByDirection
  list_id: OrderByDirection
}

input TaskListsUpdateInput {
  task_id: BigInt
  list_id: BigInt
}

type TaskListsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [TaskLists!]!
}

type TaskTags implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: BigInt!
  task_id: BigInt
  tag_id: BigInt
  tasks: Tasks
  tags: Tags
}

type TaskTagsConnection {
  edges: [TaskTagsEdge!]!
  pageInfo: PageInfo!
}

type TaskTagsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [TaskTags!]!
}

type TaskTagsEdge {
  cursor: String!
  node: TaskTags!
}

input TaskTagsFilter {
  id: BigIntFilter
  task_id: BigIntFilter
  tag_id: BigIntFilter
  nodeId: IDFilter
}

input TaskTagsInsertInput {
  task_id: BigInt
  tag_id: BigInt
}

type TaskTagsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [TaskTags!]!
}

input TaskTagsOrderBy {
  id: OrderByDirection
  task_id: OrderByDirection
  tag_id: OrderByDirection
}

input TaskTagsUpdateInput {
  task_id: BigInt
  tag_id: BigInt
}

type TaskTagsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [TaskTags!]!
}

type Tasks implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: BigInt!
  user_id: UUID!
  title: String!
  description: String
  completed: Boolean
  created_at: Datetime!
  taskTagsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TaskTagsFilter

    """Sort order to apply to the collection"""
    orderBy: [TaskTagsOrderBy!]
  ): TaskTagsConnection
  checklistsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ChecklistsFilter

    """Sort order to apply to the collection"""
    orderBy: [ChecklistsOrderBy!]
  ): ChecklistsConnection
  taskListsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: TaskListsFilter

    """Sort order to apply to the collection"""
    orderBy: [TaskListsOrderBy!]
  ): TaskListsConnection
}

type TasksConnection {
  edges: [TasksEdge!]!
  pageInfo: PageInfo!
}

type TasksDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Tasks!]!
}

type TasksEdge {
  cursor: String!
  node: Tasks!
}

input TasksFilter {
  id: BigIntFilter
  user_id: UUIDFilter
  title: StringFilter
  description: StringFilter
  completed: BooleanFilter
  created_at: DatetimeFilter
  nodeId: IDFilter
}

input TasksInsertInput {
  user_id: UUID
  title: String
  description: String
  completed: Boolean
  created_at: Datetime
}

type TasksInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Tasks!]!
}

input TasksOrderBy {
  id: OrderByDirection
  user_id: OrderByDirection
  title: OrderByDirection
  description: OrderByDirection
  completed: OrderByDirection
  created_at: OrderByDirection
}

input TasksUpdateInput {
  user_id: UUID
  title: String
  description: String
  completed: Boolean
  created_at: Datetime
}

type TasksUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Tasks!]!
}

"""A time without date information"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

"""A universally unique identifier"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}